input,output
"How many products exist?","product_count = self.env['product.product'].search_count([])"
"How many CRM opportunities are in the 'new' state?","new_opportunities_count = self.env['crm.lead'].search_count([('type', '=', 'opportunity'), ('stage_id.name', '=', 'New')])"
"Create a new customer named TechCorp with website www.techcorp.com","self.env['res.partner'].create({'name': 'TechCorp', 'website': 'www.techcorp.com', 'customer_rank': 1})"
"Update all draft sales orders to be priority High","draft_orders = self.env['sale.order'].search([('state', '=', 'draft')])\ndraft_orders.write({'priority': 'high'})"
"Find all customers who haven't placed an order in the last 30 days","from datetime import datetime, timedelta\nthirty_days_ago = datetime.now() - timedelta(days=30)\nrecent_order_partners = self.env['sale.order'].search([('date_order', '>=', thirty_days_ago)]).mapped('partner_id')\ninactive_customers = self.env['res.partner'].search([('customer_rank', '>', 0), ('id', 'not in', recent_order_partners.ids)])"
"List all products with stock less than 10 units","low_stock_products = self.env['product.product'].search([('qty_available', '<', 10)])"
"Count the number of sales orders created this month","from datetime import datetime\nfirst_day = datetime.today().replace(day=1)\nmonthly_orders_count = self.env['sale.order'].search_count([('date_order', '>=', first_day.strftime('%Y-%m-%d'))])"
"Archive all inactive products","inactive_products = self.env['product.product'].search([('active', '=', True), ('sale_ok', '=', False), ('purchase_ok', '=', False)])\ninactive_products.write({'active': False})"
"Create a new warehouse in New York","self.env['stock.warehouse'].create({'name': 'New York Warehouse', 'code': 'NY', 'company_id': self.env.company.id})"
"Find the top 10 most expensive products","expensive_products = self.env['product.product'].search([('list_price', '>', 0)], order='list_price desc', limit=10)"
"Mark all overdue invoices as urgent","overdue_invoices = self.env['account.move'].search([('invoice_date_due', '<', fields.Date.today()), ('state', '=', 'posted'), ('payment_state', '!=', 'paid')])\noverdue_invoices.write({'priority': 'high'})"
"Calculate the total value of current inventory","products = self.env['product.product'].search([])\ntotal_value = sum(product.qty_available * product.standard_price for product in products)"
"Send an email to all customers who have unpaid invoices","customers_with_unpaid = self.env['res.partner'].search([('invoice_ids', '!=', False), ('invoice_ids.state', '=', 'posted'), ('invoice_ids.payment_state', '!=', 'paid')])\nmail_template = self.env.ref('account.email_template_edi_invoice_overdue')\nfor customer in customers_with_unpaid:\n    mail_template.send_mail(customer.id, force_send=True)"
"How many sales are confirmed but not delivered?","undelivered_sales = self.env['sale.order'].search_count([('state', '=', 'sale'), ('delivery_count', '=', 0)])"
"Create a new sales order for customer ABC with 5 units of product XYZ","customer = self.env['res.partner'].search([('name', '=', 'ABC')], limit=1)\nproduct = self.env['product.product'].search([('default_code', '=', 'XYZ')], limit=1)\norder = self.env['sale.order'].create({'partner_id': customer.id})\nself.env['sale.order.line'].create({'order_id': order.id, 'product_id': product.id, 'product_uom_qty': 5})"
"Get a list of all products in category 'Electronics'","electronics_category = self.env['product.category'].search([('name', '=', 'Electronics')], limit=1)\nelectronics_products = self.env['product.product'].search([('categ_id', '=', electronics_category.id)])"
"Find the average sale price of all products","products = self.env['product.product'].search([('list_price', '>', 0)])\navg_price = sum(products.mapped('list_price')) / len(products) if products else 0"
"Get the total number of customers we have","customer_count = self.env['res.partner'].search_count([('customer_rank', '>', 0)])"
"Find the products that have never been sold","sold_products = self.env['sale.order.line'].search([]).mapped('product_id')\nnever_sold = self.env['product.product'].search([('id', 'not in', sold_products.ids), ('sale_ok', '=', True)])"
"Create a new employee named John Smith as a sales person","self.env['hr.employee'].create({'name': 'John Smith', 'job_title': 'Sales Person', 'department_id': self.env.ref('hr.dep_sales').id})"
"Cancel all draft purchase orders older than 30 days","from datetime import datetime, timedelta\nthirty_days_ago = datetime.now() - timedelta(days=30)\nold_draft_pos = self.env['purchase.order'].search([('state', '=', 'draft'), ('date_order', '<', thirty_days_ago.strftime('%Y-%m-%d'))])\nold_draft_pos.button_cancel()"
"Find all products that need to be reordered based on minimum stock rules","reordering_products = self.env['product.product'].search([('qty_available', '<=', 'orderpoint_ids.product_min_qty')])"
"Count the number of purchase orders in the 'to approve' state","to_approve_count = self.env['purchase.order'].search_count([('state', '=', 'to approve')])"
"Get the total sales amount for the current month","from datetime import datetime\nfirst_day = datetime.today().replace(day=1)\nmonthly_sales = self.env['sale.order'].search([('date_order', '>=', first_day.strftime('%Y-%m-%d')), ('state', 'in', ['sale', 'done'])])\ntotal_amount = sum(order.amount_total for order in monthly_sales)"
"Find vendors who we haven't ordered from in the last 60 days","from datetime import datetime, timedelta\nsixty_days_ago = datetime.now() - timedelta(days=60)\nrecent_vendors = self.env['purchase.order'].search([('date_order', '>=', sixty_days_ago.strftime('%Y-%m-%d'))]).mapped('partner_id')\ninactive_vendors = self.env['res.partner'].search([('supplier_rank', '>', 0), ('id', 'not in', recent_vendors.ids)])"
"Update the price of all products in category 'Furniture' by adding 5%","furniture_category = self.env['product.category'].search([('name', '=', 'Furniture')], limit=1)\nfurniture_products = self.env['product.product'].search([('categ_id', '=', furniture_category.id)])\nfor product in furniture_products:\n    product.write({'list_price': product.list_price * 1.05})"
"Calculate the total weight of a sales order","order = self.env['sale.order'].browse(self.env.context.get('active_id'))\ntotal_weight = sum(line.product_id.weight * line.product_uom_qty for line in order.order_line)"
"Find the best selling product this year","from datetime import datetime\nstart_of_year = datetime(datetime.today().year, 1, 1)\nsales_lines = self.env['sale.order.line'].search([('order_id.date_order', '>=', start_of_year.strftime('%Y-%m-%d')), ('order_id.state', 'in', ['sale', 'done'])])\nproduct_sales = {}\nfor line in sales_lines:\n    if line.product_id in product_sales:\n        product_sales[line.product_id] += line.product_uom_qty\n    else:\n        product_sales[line.product_id] = line.product_uom_qty\nbest_selling = max(product_sales.items(), key=lambda x: x[1]) if product_sales else None"
"Get a list of all users who haven't logged in for the past 3 months","from datetime import datetime, timedelta\nthree_months_ago = datetime.now() - timedelta(days=90)\ninactive_users = self.env['res.users'].search([('login_date', '<', three_months_ago.strftime('%Y-%m-%d'))])"
"Create a new project called 'Website Redesign'","self.env['project.project'].create({'name': 'Website Redesign', 'description': 'Project to redesign company website', 'user_id': self.env.user.id})"
"Set all products in category 'Services' to be services (not stockable)","services_category = self.env['product.category'].search([('name', '=', 'Services')], limit=1)\nservice_products = self.env['product.product'].search([('categ_id', '=', services_category.id)])\nservice_products.write({'type': 'service'})"
"Count the number of users in the system by company","companies = self.env['res.company'].search([])\ncompany_user_counts = {company.name: self.env['res.users'].search_count([('company_id', '=', company.id)]) for company in companies}"
"Find all sales orders with more than 5 order lines","orders_with_many_lines = self.env['sale.order'].search([])\norders_with_many_lines = orders_with_many_lines.filtered(lambda o: len(o.order_line) > 5)"
"Get a count of products by category","categories = self.env['product.category'].search([])\ncategory_counts = {category.name: self.env['product.product'].search_count([('categ_id', '=', category.id)]) for category in categories}"
"Archive all contacts that have no activity for the last year","from datetime import datetime, timedelta\none_year_ago = datetime.now() - timedelta(days=365)\ninactive_contacts = self.env['res.partner'].search([('activity_ids', '=', False), ('message_ids.date', '<', one_year_ago.strftime('%Y-%m-%d'))])\ninactive_contacts.write({'active': False})"
"Find customers with overdue invoices greater than $1000","overdue_customers = self.env['res.partner'].search([('invoice_ids.invoice_date_due', '<', fields.Date.today()), ('invoice_ids.amount_residual', '>', 1000), ('invoice_ids.state', '=', 'posted'), ('invoice_ids.payment_state', '!=', 'paid')])"
"Create a delivery order for a sales order","sale_order = self.env['sale.order'].browse(self.env.context.get('active_id'))\nif sale_order.state == 'sale':\n    picking = sale_order.picking_ids.filtered(lambda p: p.state not in ['done', 'cancel'])\n    if picking:\n        picking.action_assign()"
"Find the average time it takes to confirm sales orders","from datetime import datetime\nconfirmed_orders = self.env['sale.order'].search([('state', 'in', ['sale', 'done']), ('date_order', '!=', False), ('confirmation_date', '!=', False)])\ntotal_hours = 0\nfor order in confirmed_orders:\n    delta = fields.Datetime.from_string(order.confirmation_date) - fields.Datetime.from_string(order.date_order)\n    total_hours += delta.total_seconds() / 3600\navg_hours = total_hours / len(confirmed_orders) if confirmed_orders else 0"
"Calculate the profit margin on all products","products = self.env['product.product'].search([('standard_price', '>', 0), ('list_price', '>', 0)])\nfor product in products:\n    margin = (product.list_price - product.standard_price) / product.list_price * 100"
"List all products without a barcode","products_without_barcode = self.env['product.product'].search([('barcode', '=', False), ('active', '=', True)])"
"Find all purchase orders created this week","from datetime import datetime, timedelta\ntoday = datetime.now()\nstart_of_week = today - timedelta(days=today.weekday())\nend_of_week = start_of_week + timedelta(days=6)\nthis_week_pos = self.env['purchase.order'].search([('date_order', '>=', start_of_week.strftime('%Y-%m-%d')), ('date_order', '<=', end_of_week.strftime('%Y-%m-%d'))])"
"Assign a sales team to a customer","customer = self.env['res.partner'].browse(self.env.context.get('active_id'))\nsales_team = self.env['crm.team'].search([('name', '=', 'Europe')], limit=1)\ncustomer.write({'team_id': sales_team.id})"
"Find all invoices with payment terms of 30 days or more","long_term_invoices = self.env['account.move'].search([('invoice_payment_term_id.line_ids.days', '>=', 30)])"
"Calculate the age of inventory for all products","from datetime import datetime\nproducts = self.env['product.product'].search([('qty_available', '>', 0)])\ntoday = datetime.now()\nfor product in products:\n    last_move = self.env['stock.move'].search([('product_id', '=', product.id), ('state', '=', 'done')], order='date desc', limit=1)\n    if last_move:\n        delta = today - fields.Datetime.from_string(last_move.date)\n        product_age = delta.days"
"Schedule a stock inventory check for all products","self.env['stock.inventory'].create({'name': 'Annual Inventory Check ' + fields.Date.today().strftime('%Y-%m-%d'), 'location_ids': [(4, self.env.ref('stock.stock_location_stock').id)], 'start_empty': False})"
"Get a list of all sales by country","countries = self.env['res.country'].search([])\nsales_by_country = {}\nfor country in countries:\n    country_sales = self.env['sale.order'].search_count([('partner_id.country_id', '=', country.id), ('state', 'in', ['sale', 'done'])])\n    sales_by_country[country.name] = country_sales"
"Find all products that are both purchasable and sellable","dual_purpose_products = self.env['product.product'].search([('sale_ok', '=', True), ('purchase_ok', '=', True)])"
"Calculate the total tax amount collected this quarter","from datetime import datetime\ntoday = datetime.now()\nquarter_start_month = ((today.month - 1) // 3) * 3 + 1\nquarter_start = datetime(today.year, quarter_start_month, 1)\nquarter_invoices = self.env['account.move'].search([('invoice_date', '>=', quarter_start.strftime('%Y-%m-%d')), ('state', '=', 'posted'), ('move_type', 'in', ['out_invoice', 'out_refund'])])\ntotal_tax = sum(invoice.amount_tax for invoice in quarter_invoices)"
"Get a count of ongoing manufacturing orders by product","manufacturing_orders = self.env['mrp.production'].search([('state', 'not in', ['done', 'cancel'])])\nproduct_counts = {}\nfor mo in manufacturing_orders:\n    if mo.product_id in product_counts:\n        product_counts[mo.product_id] += 1\n    else:\n        product_counts[mo.product_id] = 1"
"Update the cost price of a product based on its latest purchase price","product = self.env['product.product'].browse(self.env.context.get('active_id'))\nlatest_purchase = self.env['purchase.order.line'].search([('product_id', '=', product.id), ('state', 'in', ['purchase', 'done'])], order='date_planned desc', limit=1)\nif latest_purchase:\n    product.write({'standard_price': latest_purchase.price_unit})"
"Find all sales orders that have not been invoiced yet","uninvoiced_orders = self.env['sale.order'].search([('state', '=', 'sale'), ('invoice_status', '=', 'to invoice')])"
"Get a list of customers who have purchased a specific product","product_id = self.env.context.get('active_id')\nproduct_customers = self.env['sale.order.line'].search([('product_id', '=', product_id), ('state', 'in', ['sale', 'done'])]).mapped('order_id.partner_id')"
"Count open helpdesk tickets by priority","priorities = dict(self.env['helpdesk.ticket']._fields['priority'].selection)\nticket_counts = {priority_name: self.env['helpdesk.ticket'].search_count([('stage_id.is_close', '=', False), ('priority', '=', priority_code)]) for priority_code, priority_name in priorities.items()}"
"Send an inventory report by email to the warehouse manager","inventory_report = self.env.ref('stock.action_report_inventory')\nwarehouse_manager = self.env['res.users'].search([('groups_id', '=', self.env.ref('stock.group_stock_manager').id)], limit=1)\nif warehouse_manager and warehouse_manager.partner_id and warehouse_manager.partner_id.email:\n    inventory_report.send_report_email(warehouse_manager.partner_id)"
