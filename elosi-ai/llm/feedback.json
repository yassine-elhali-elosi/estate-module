{"input": "List all opportunities in \"new\" state and that are in my pipeline", "output": "opportunities_in_new = self.env['crm.lead'].search([('type', '=', 'opportunity'),('stage_id.name', '=', 'New'),('user_id', '=', self.env.user.id)])"}
{"input": "List all opportunities that are won", "output": "won_opportunities = self.env['crm.lead'].search([('type', '=', 'opportunity'), ('stage_id.is_won', '=', True)])"}
{"input": "list all opportunities that are won and in my pipeline", "output": "opportunities_won_in_my_pipeline = self.env['crm.lead'].search([('type', '=', 'opportunity'),('stage_id.is_won', '=', True),('user_id', '=', self.env.user.id)])"}
{"input": "list all projects that have \"Internal\" tag", "output": "internal_projects = self.env['project.project'].search([('stage_id.is_internal', '=', True), ('stage_id.name', '=', 'Internal')])"}
{"input": "Which product has the most inventory stock?", "output": "product_with_most_stock = self.env['product.product'].search([('qty_available', '>', 0)], order='qty_available desc', limit=1)"}
{"input": "list all projects that have \"External\" tag", "output": "external_projects = self.env['project.project'].search([('stage_id.is_external', '=', True), ('stage_id.name', '=', 'External')])"}
{"input": "list all projects that have \"Not Internal\" tag", "output": "not_internal_projects = self.env['project.project'].search([('stage_id.is_internal', '=', True), ('stage_id.name', '=', 'Not Internal')])"}
{"input": "Show me products with less than 10 items in stock", "output": "low_stock_products = self.env['product.product'].search([('qty_available', '<', 10), ('type', '=', 'product')])"}
{"input": "List products that have inventory below 5 units", "output": "critical_stock_products = self.env['product.product'].search([('qty_available', '<', 5), ('type', '=', 'product')])"}
{"input": "Find all products where stock quantity is under 15", "output": "watch_stock_products = self.env['product.product'].search([('qty_available', '<', 15), ('type', '=', 'product')])"}
{"input": "Calculate total sales for this month", "output": "from datetime import datetime\ntoday = datetime.today()\nfirst_day = today.replace(day=1)\nsales_this_month = self.env['sale.order'].search([('date_order', '>=', first_day.strftime('%Y-%m-%d')), ('state', 'in', ['sale', 'done'])])\ntotal_amount = sum(sales_this_month.mapped('amount_total'))"}
{"input": "What's our revenue so far this month", "output": "from datetime import datetime\ntoday = datetime.today()\nfirst_day = today.replace(day=1)\nmonth_invoices = self.env['account.move'].search([('invoice_date', '>=', first_day.strftime('%Y-%m-%d')), ('state', '=', 'posted'), ('move_type', '=', 'out_invoice')])\nmonth_revenue = sum(month_invoices.mapped('amount_total'))"}
{"input": "Show me sales figures for current month", "output": "from datetime import datetime\ntoday = datetime.today()\nfirst_day = today.replace(day=1)\nmonth_orders = self.env['sale.order'].search([('date_order', '>=', first_day.strftime('%Y-%m-%d')), ('state', 'in', ['sale', 'done'])])\nmonth_sales = sum(month_orders.mapped('amount_total'))"}
{"input": "Find customers who haven't ordered in 3 months", "output": "from datetime import datetime, timedelta\ncutoff_date = datetime.today() - timedelta(days=90)\ninactive_customers = self.env['res.partner'].search([('customer_rank', '>', 0), ('id', 'not in', self.env['sale.order'].search([('date_order', '>=', cutoff_date.strftime('%Y-%m-%d'))]).mapped('partner_id').ids)])"}
{"input": "List clients with no purchases in last 90 days", "output": "from datetime import datetime, timedelta\nthree_months_ago = datetime.today() - timedelta(days=90)\ndormant_clients = self.env['res.partner'].search([('customer_rank', '>', 0), ('id', 'not in', self.env['sale.order'].search([('date_order', '>=', three_months_ago.strftime('%Y-%m-%d'))]).mapped('partner_id').ids)])"}
{"input": "Show inactive customers who haven't bought anything for a quarter", "output": "from datetime import datetime, timedelta\nquarter_ago = datetime.today() - timedelta(days=90)\ndormant_customers = self.env['res.partner'].search([('customer_rank', '>', 0), ('id', 'not in', self.env['sale.order'].search([('date_order', '>=', quarter_ago.strftime('%Y-%m-%d'))]).mapped('partner_id').ids)])"}
{"input": "Create a new customer named 'ABC Corp'", "output": "new_customer = self.env['res.partner'].create({\n    'name': 'ABC Corp',\n    'company_type': 'company',\n    'customer_rank': 1\n})"}
{"input": "Add company 'Tech Solutions Inc' as a customer", "output": "tech_company = self.env['res.partner'].create({\n    'name': 'Tech Solutions Inc',\n    'company_type': 'company',\n    'customer_rank': 1\n})"}
{"input": "Set up a new customer record for 'Global Enterprises'", "output": "global_ent = self.env['res.partner'].create({\n    'name': 'Global Enterprises',\n    'company_type': 'company',\n    'customer_rank': 1\n})"}
{"input": "Get all unpaid invoices", "output": "unpaid_invoices = self.env['account.move'].search([('move_type', '=', 'out_invoice'), ('payment_state', '!=', 'paid'), ('state', '=', 'posted')])"}
{"input": "Find invoices that haven't been paid yet", "output": "open_invoices = self.env['account.move'].search([('move_type', '=', 'out_invoice'), ('payment_state', 'in', ['not_paid', 'partial']), ('state', '=', 'posted')])"}
{"input": "List all outstanding customer invoices", "output": "outstanding_invoices = self.env['account.move'].search([('move_type', '=', 'out_invoice'), ('payment_state', 'not in', ['paid', 'in_payment']), ('state', '=', 'posted')])"}
{"input": "Find products without suppliers", "output": "products_no_suppliers = self.env['product.product'].search([('seller_ids', '=', False), ('type', '=', 'product')])"}
{"input": "Show me products that have no vendor assigned", "output": "no_vendor_products = self.env['product.product'].search([('seller_ids', '=', False), ('type', '=', 'product')])"}
{"input": "List items in inventory that don't have suppliers", "output": "items_without_vendors = self.env['product.product'].search([('seller_ids', '=', False), ('type', '=', 'product')])"}
{"input": "Send email to all customers about new promotion", "output": "template = self.env.ref('mail.email_template_promotion')\ncustomers = self.env['res.partner'].search([('customer_rank', '>', 0)])\nfor customer in customers:\n    template.send_mail(customer.id, force_send=True)"}
{"input": "Email all clients about our summer sale", "output": "template = self.env.ref('mail.email_template_summer_sale')\nclients = self.env['res.partner'].search([('customer_rank', '>', 0)])\nfor client in clients:\n    template.send_mail(client.id, force_send=True)"}
{"input": "Notify all customers about website maintenance", "output": "template = self.env.ref('mail.email_template_maintenance')\npartners = self.env['res.partner'].search([('customer_rank', '>', 0)])\nfor partner in partners:\n    template.send_mail(partner.id, force_send=True)"}
{"input": "Set all overdue tasks to high priority", "output": "overdue_tasks = self.env['project.task'].search([('date_deadline', '<', fields.Date.today()), ('stage_id.fold', '=', False)])\noverdue_tasks.write({'priority': '1'})"}
{"input": "Mark all late tasks as urgent", "output": "late_tasks = self.env['project.task'].search([('date_deadline', '<', fields.Date.today()), ('stage_id.fold', '=', False)])\nlate_tasks.write({'priority': '1'})"}
{"input": "Update priority of all delayed tasks to high", "output": "delayed_tasks = self.env['project.task'].search([('date_deadline', '<', fields.Date.today()), ('stage_id.fold', '=', False)])\ndelayed_tasks.write({'priority': '1'})"}
{"input": "Calculate total hours logged on all projects this week", "output": "from datetime import datetime, timedelta\ntoday = datetime.today()\nweek_start = today - timedelta(days=today.weekday())\nweek_timesheets = self.env['account.analytic.line'].search([('project_id', '!=', False), ('date', '>=', week_start.strftime('%Y-%m-%d'))])\ntotal_hours = sum(week_timesheets.mapped('unit_amount'))"}
{"input": "How many hours were recorded on projects since Monday", "output": "from datetime import datetime, timedelta\ntoday = datetime.today()\nweek_start = today - timedelta(days=today.weekday())\nthis_week_entries = self.env['account.analytic.line'].search([('project_id', '!=', False), ('date', '>=', week_start.strftime('%Y-%m-%d'))])\nweek_hours = sum(this_week_entries.mapped('unit_amount'))"}
{"input": "Sum up project timesheet hours for this week", "output": "from datetime import datetime, timedelta\ntoday = datetime.today()\nweek_start = today - timedelta(days=today.weekday())\ntime_entries = self.env['account.analytic.line'].search([('project_id', '!=', False), ('date', '>=', week_start.strftime('%Y-%m-%d'))])\nweekly_hours = sum(time_entries.mapped('unit_amount'))"}
{"input": "Find quotations that have been open for more than 30 days", "output": "from datetime import datetime, timedelta\nthirty_days_ago = datetime.today() - timedelta(days=30)\nold_quotations = self.env['sale.order'].search([('state', '=', 'draft'), ('date_order', '<', thirty_days_ago.strftime('%Y-%m-%d'))])"}
{"input": "List all draft sales orders older than a month", "output": "from datetime import datetime, timedelta\nmonth_ago = datetime.today() - timedelta(days=30)\naging_quotes = self.env['sale.order'].search([('state', '=', 'draft'), ('date_order', '<', month_ago.strftime('%Y-%m-%d'))])"}
{"input": "Show quotations not confirmed for more than 30 days", "output": "from datetime import datetime, timedelta\nthreshold_date = datetime.today() - timedelta(days=30)\nstale_quotations = self.env['sale.order'].search([('state', '=', 'draft'), ('date_order', '<', threshold_date.strftime('%Y-%m-%d'))])"}
